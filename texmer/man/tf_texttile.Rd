% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/texttile.R
\name{tf_texttile}
\alias{tf_texttile}
\title{Segmenting text into multi-paragraph subtopic passages.}
\usage{
tf_texttile(corpus, stopwords, sentence_size, block_size, method = "block",
  liberal = TRUE, smoothing_rounds = 1, smoothing_width = 2)
}
\arguments{
\item{corpus}{A data frame with columns 'id' and 'token'.}

\item{stopwords}{A character vector of stopwords.}

\item{sentence_size}{The pseudo-sentence size, the number of tokens in a sentence. See 'Details' for more information.}

\item{block_size}{The block size as defined in the paper. See 'Details' for more information.}

\item{method}{The method for lexical scoring; currently are 'block' and 'vocabulary' supported.}

\item{liberal}{A logical. If 'TRUE' (the default) the depth cutoff will be more liberal. See 'Details' for more information.}
}
\value{
A data frame with 'token' replaced by the segments in 'text'. 'id' contains the new ids and the old ids are preserved in 'docid'.
}
\description{
TextTiling is segmenting text into multi-paragraph subtopic passages.
It is based on the paper 'TextTiling: Segmenting Text into Multi-paragraph Subtopic Passages'
written by Marti A. Hearst.
}
\details{
The algorithm can be broken down into three parts:
\enumerate{
\item Tokenization
\item Lexical Score Determination
\item Boundary Identification
}
The following sections will describe the different parts in detail.
}
\section{Tokenization}{

Tokenization refers to the division of the input document to lexical units. The document is first transformed to lowercase, non-alphanumeric characters are removed, and then is converted into so called token-sequences based on the \code{sentence_size}. Stopwords are contributed to the sentence size but are removed from the token-sequences. Given the stopwords ('are', 'doing') and a sentence size of two, the document 'Hello World! What are you doing?' will be converted to the token-sequences ('hello world', 'what', 'you').
}

\section{Lexical Score Determination}{

In order to find subtopics in the document, the algorithm uses different lexical scoring methods. Current implementation provides two different methods, 'Block' and 'Vocabulary'.

The block method groups \code{block_size} many adjacent token-sequences and is meant to approximate the average paragraph size. Adjacent blocks are then compared for overall lexical similarity based on normalized inner product of two blocks. The actual numbers in the computation are the frequgencies of the tokens.

The vocabulary method uses the vocabulary to find lexical similatiry between pairs of token-sequences. The lexical score is based on the number of new terms up to that point, i.e., occuring for the first time in the document, between adjacent token-sequences. That is if there are few new terms then the score will be low and vice-verse.
}

\section{Boundary Identification}{

Segmenting the document is equivalent to finding boundary points of subtopics in the document which is based on the lexical scores. The boundary identification algorithm assigns a depth score, the depth of the valley if one occurs, to each lexical score. A deep valley means that, based on the lexical score, there have been a change in topic at that point. The \code{liberal_depth_cutoff} is used to determine if the valley is deep enough for a boundary point. As the name suggests if it is set to 'TRUE' it will be more liberal. When the boundary points have been identified the document is segmented at those points.
}

