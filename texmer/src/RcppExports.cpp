// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_texttile_segments_cpp
Rcpp::List get_texttile_segments_cpp(const Rcpp::List& tokens, const Rcpp::StringVector& stopwords, std::size_t sentence_size, std::size_t block_size, const Rcpp::CharacterVector& method, bool liberal);
RcppExport SEXP _texmer_get_texttile_segments_cpp(SEXP tokensSEXP, SEXP stopwordsSEXP, SEXP sentence_sizeSEXP, SEXP block_sizeSEXP, SEXP methodSEXP, SEXP liberalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type tokens(tokensSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector& >::type stopwords(stopwordsSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type sentence_size(sentence_sizeSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type liberal(liberalSEXP);
    rcpp_result_gen = Rcpp::wrap(get_texttile_segments_cpp(tokens, stopwords, sentence_size, block_size, method, liberal));
    return rcpp_result_gen;
END_RCPP
}
// get_token_segment_ids_cpp
Rcpp::IntegerVector get_token_segment_ids_cpp(const Rcpp::IntegerVector& n_tokens_per_doc, const Rcpp::IntegerVector& n_segs_per_doc, const Rcpp::IntegerVector& segsize_per_doc);
RcppExport SEXP _texmer_get_token_segment_ids_cpp(SEXP n_tokens_per_docSEXP, SEXP n_segs_per_docSEXP, SEXP segsize_per_docSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type n_tokens_per_doc(n_tokens_per_docSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type n_segs_per_doc(n_segs_per_docSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type segsize_per_doc(segsize_per_docSEXP);
    rcpp_result_gen = Rcpp::wrap(get_token_segment_ids_cpp(n_tokens_per_doc, n_segs_per_doc, segsize_per_doc));
    return rcpp_result_gen;
END_RCPP
}
// run_testthat_tests
bool run_testthat_tests();
RcppExport SEXP _texmer_run_testthat_tests() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(run_testthat_tests());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_mod_topictile();

static const R_CallMethodDef CallEntries[] = {
    {"_texmer_get_texttile_segments_cpp", (DL_FUNC) &_texmer_get_texttile_segments_cpp, 6},
    {"_texmer_get_token_segment_ids_cpp", (DL_FUNC) &_texmer_get_token_segment_ids_cpp, 3},
    {"_texmer_run_testthat_tests", (DL_FUNC) &_texmer_run_testthat_tests, 0},
    {"_rcpp_module_boot_mod_topictile", (DL_FUNC) &_rcpp_module_boot_mod_topictile, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_texmer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
